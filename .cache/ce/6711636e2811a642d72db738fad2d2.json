{"id":"../node_modules/escape-string-regexp/index.js","dependencies":[{"name":"/Users/eliace/Workspace/ergo-js-3/package.json","includedInParent":true,"mtime":1558032716703},{"name":"/Users/eliace/Workspace/ergo-js-3/node_modules/escape-string-regexp/package.json","includedInParent":true,"mtime":1558032184527}],"generated":{"js":"'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  return str.replace(matchOperatorsRe, '\\\\$&');\n};"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":3,"column":0}},{"name":"matchOperatorsRe","generated":{"line":3,"column":4},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":3,"column":4}},{"generated":{"line":3,"column":20},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":3,"column":20}},{"generated":{"line":3,"column":23},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":3,"column":23}},{"generated":{"line":3,"column":44},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":3,"column":0}},{"name":"module","generated":{"line":5,"column":0},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":5,"column":0}},{"generated":{"line":5,"column":6},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":5,"column":6}},{"name":"exports","generated":{"line":5,"column":7},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":5,"column":7}},{"generated":{"line":5,"column":14},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":5,"column":0}},{"generated":{"line":5,"column":17},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":5,"column":17}},{"name":"str","generated":{"line":5,"column":27},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":5,"column":27}},{"generated":{"line":5,"column":30},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":5,"column":17}},{"generated":{"line":5,"column":32},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":5,"column":32}},{"generated":{"line":6,"column":0},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":6,"column":1}},{"generated":{"line":6,"column":6},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":6,"column":5}},{"name":"str","generated":{"line":6,"column":13},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":6,"column":12}},{"generated":{"line":6,"column":16},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":6,"column":5}},{"generated":{"line":6,"column":21},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":6,"column":20}},{"generated":{"line":6,"column":29},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":6,"column":1}},{"generated":{"line":6,"column":31},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":6,"column":30}},{"generated":{"line":7,"column":0},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":7,"column":2}},{"generated":{"line":7,"column":10},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":7,"column":8}},{"name":"TypeError","generated":{"line":7,"column":14},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":7,"column":12}},{"generated":{"line":7,"column":23},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":7,"column":8}},{"generated":{"line":7,"column":24},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":7,"column":22}},{"generated":{"line":7,"column":43},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":7,"column":8}},{"generated":{"line":7,"column":44},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":7,"column":2}},{"generated":{"line":8,"column":0},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":8,"column":2}},{"generated":{"line":10,"column":0},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":10,"column":1}},{"name":"str","generated":{"line":10,"column":9},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":10,"column":8}},{"generated":{"line":10,"column":12},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":10,"column":11}},{"name":"replace","generated":{"line":10,"column":13},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":10,"column":12}},{"generated":{"line":10,"column":20},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":10,"column":8}},{"name":"matchOperatorsRe","generated":{"line":10,"column":21},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":10,"column":20}},{"generated":{"line":10,"column":37},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":10,"column":8}},{"generated":{"line":10,"column":39},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":10,"column":38}},{"generated":{"line":10,"column":45},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":10,"column":8}},{"generated":{"line":10,"column":46},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":10,"column":1}},{"generated":{"line":11,"column":0},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":11,"column":1}},{"generated":{"line":11,"column":1},"source":"../node_modules/escape-string-regexp/index.js","original":{"line":5,"column":0}}],"sources":{"../node_modules/escape-string-regexp/index.js":"'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe, '\\\\$&');\n};\n"},"lineCount":null}},"error":null,"hash":"36f652a5ce54f02df8f8d3ab7ab96b73","cacheData":{"env":{}}}