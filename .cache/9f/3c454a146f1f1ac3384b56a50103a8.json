{"id":"node_modules/maquette/dist/maquette.umd.js","dependencies":[{"name":"/Users/eliace/Workspace/ergo-js-3/package.json","includedInParent":true,"mtime":1558209687756},{"name":"/Users/eliace/Workspace/ergo-js-3/.babelrc","includedInParent":true,"mtime":1558202053248},{"name":"/Users/eliace/Workspace/ergo-js-3/node_modules/maquette/package.json","includedInParent":true,"mtime":1558028933716}],"generated":{"js":"var define;\nvar global = arguments[3];\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.maquette = {})));\n}(this, (function (exports) { 'use strict';\n\n    /* tslint:disable no-http-string */\r\n    var NAMESPACE_W3 = 'http://www.w3.org/';\r\n    /* tslint:enable no-http-string */\r\n    var NAMESPACE_SVG = NAMESPACE_W3 + \"2000/svg\";\r\n    var NAMESPACE_XLINK = NAMESPACE_W3 + \"1999/xlink\";\r\n    var emptyArray = [];\r\n    var extend = function (base, overrides) {\r\n        var result = {};\r\n        Object.keys(base).forEach(function (key) {\r\n            result[key] = base[key];\r\n        });\r\n        if (overrides) {\r\n            Object.keys(overrides).forEach(function (key) {\r\n                result[key] = overrides[key];\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n    var same = function (vnode1, vnode2) {\r\n        if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\r\n            return false;\r\n        }\r\n        if (vnode1.properties && vnode2.properties) {\r\n            if (vnode1.properties.key !== vnode2.properties.key) {\r\n                return false;\r\n            }\r\n            return vnode1.properties.bind === vnode2.properties.bind;\r\n        }\r\n        return !vnode1.properties && !vnode2.properties;\r\n    };\r\n    var checkStyleValue = function (styleValue) {\r\n        if (typeof styleValue !== 'string') {\r\n            throw new Error('Style values must be strings');\r\n        }\r\n    };\r\n    var findIndexOfChild = function (children, sameAs, start) {\r\n        if (sameAs.vnodeSelector !== '') {\r\n            // Never scan for text-nodes\r\n            for (var i = start; i < children.length; i++) {\r\n                if (same(children[i], sameAs)) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    var checkDistinguishable = function (childNodes, indexToCheck, parentVNode, operation) {\r\n        var childNode = childNodes[indexToCheck];\r\n        if (childNode.vnodeSelector === '') {\r\n            return; // Text nodes need not be distinguishable\r\n        }\r\n        var properties = childNode.properties;\r\n        var key = properties ? (properties.key === undefined ? properties.bind : properties.key) : undefined;\r\n        if (!key) { // A key is just assumed to be unique\r\n            for (var i = 0; i < childNodes.length; i++) {\r\n                if (i !== indexToCheck) {\r\n                    var node = childNodes[i];\r\n                    if (same(node, childNode)) {\r\n                        throw new Error(parentVNode.vnodeSelector + \" had a \" + childNode.vnodeSelector + \" child \" + (operation === 'added' ? operation : 'removed') + \", but there is now more than one. You must add unique key properties to make them distinguishable.\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var nodeAdded = function (vNode) {\r\n        if (vNode.properties) {\r\n            var enterAnimation = vNode.properties.enterAnimation;\r\n            if (enterAnimation) {\r\n                enterAnimation(vNode.domNode, vNode.properties);\r\n            }\r\n        }\r\n    };\r\n    var removedNodes = [];\r\n    var requestedIdleCallback = false;\r\n    var visitRemovedNode = function (node) {\r\n        (node.children || []).forEach(visitRemovedNode);\r\n        if (node.properties && node.properties.afterRemoved) {\r\n            node.properties.afterRemoved.apply(node.properties.bind || node.properties, [node.domNode]);\r\n        }\r\n    };\r\n    var processPendingNodeRemovals = function () {\r\n        requestedIdleCallback = false;\r\n        removedNodes.forEach(visitRemovedNode);\r\n        removedNodes.length = 0;\r\n    };\r\n    var scheduleNodeRemoval = function (vNode) {\r\n        removedNodes.push(vNode);\r\n        if (!requestedIdleCallback) {\r\n            requestedIdleCallback = true;\r\n            if (typeof window !== 'undefined' && 'requestIdleCallback' in window) {\r\n                window.requestIdleCallback(processPendingNodeRemovals, { timeout: 16 });\r\n            }\r\n            else {\r\n                setTimeout(processPendingNodeRemovals, 16);\r\n            }\r\n        }\r\n    };\r\n    var nodeToRemove = function (vNode) {\r\n        var domNode = vNode.domNode;\r\n        if (vNode.properties) {\r\n            var exitAnimation = vNode.properties.exitAnimation;\r\n            if (exitAnimation) {\r\n                domNode.style.pointerEvents = 'none';\r\n                var removeDomNode = function () {\r\n                    if (domNode.parentNode) {\r\n                        domNode.parentNode.removeChild(domNode);\r\n                        scheduleNodeRemoval(vNode);\r\n                    }\r\n                };\r\n                exitAnimation(domNode, removeDomNode, vNode.properties);\r\n                return;\r\n            }\r\n        }\r\n        if (domNode.parentNode) {\r\n            domNode.parentNode.removeChild(domNode);\r\n            scheduleNodeRemoval(vNode);\r\n        }\r\n    };\r\n    var setProperties = function (domNode, properties, projectionOptions) {\r\n        if (!properties) {\r\n            return;\r\n        }\r\n        var eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\r\n        var propNames = Object.keys(properties);\r\n        var propCount = propNames.length;\r\n        var _loop_1 = function (i) {\r\n            var propName = propNames[i];\r\n            var propValue = properties[propName];\r\n            if (propName === 'className') {\r\n                throw new Error('Property \"className\" is not supported, use \"class\".');\r\n            }\r\n            else if (propName === 'class') {\r\n                toggleClasses(domNode, propValue, true);\r\n            }\r\n            else if (propName === 'classes') {\r\n                // object with string keys and boolean values\r\n                var classNames = Object.keys(propValue);\r\n                var classNameCount = classNames.length;\r\n                for (var j = 0; j < classNameCount; j++) {\r\n                    var className = classNames[j];\r\n                    if (propValue[className]) {\r\n                        domNode.classList.add(className);\r\n                    }\r\n                }\r\n            }\r\n            else if (propName === 'styles') {\r\n                // object with string keys and string (!) values\r\n                var styleNames = Object.keys(propValue);\r\n                var styleCount = styleNames.length;\r\n                for (var j = 0; j < styleCount; j++) {\r\n                    var styleName = styleNames[j];\r\n                    var styleValue = propValue[styleName];\r\n                    if (styleValue) {\r\n                        checkStyleValue(styleValue);\r\n                        projectionOptions.styleApplyer(domNode, styleName, styleValue);\r\n                    }\r\n                }\r\n            }\r\n            else if (propName !== 'key' && propValue !== null && propValue !== undefined) {\r\n                var type = typeof propValue;\r\n                if (type === 'function') {\r\n                    if (propName.lastIndexOf('on', 0) === 0) { // lastIndexOf(,0)===0 -> startsWith\r\n                        if (eventHandlerInterceptor) {\r\n                            propValue = eventHandlerInterceptor(propName, propValue, domNode, properties); // intercept eventhandlers\r\n                        }\r\n                        if (propName === 'oninput') {\r\n                            /* tslint:disable no-this-keyword no-invalid-this only-arrow-functions no-void-expression */\r\n                            (function () {\r\n                                // record the evt.target.value, because IE and Edge sometimes do a requestAnimationFrame between changing value and running oninput\r\n                                var oldPropValue = propValue;\r\n                                propValue = function (evt) {\r\n                                    oldPropValue.apply(this, [evt]);\r\n                                    evt.target['oninput-value'] = evt.target.value; // may be HTMLTextAreaElement as well\r\n                                };\r\n                            }());\r\n                            /* tslint:enable */\r\n                        }\r\n                        domNode[propName] = propValue;\r\n                    }\r\n                }\r\n                else if (projectionOptions.namespace === NAMESPACE_SVG) {\r\n                    if (propName === 'href') {\r\n                        domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);\r\n                    }\r\n                    else {\r\n                        // all SVG attributes are read-only in DOM, so...\r\n                        domNode.setAttribute(propName, propValue);\r\n                    }\r\n                }\r\n                else if (type === 'string' && propName !== 'value' && propName !== 'innerHTML') {\r\n                    domNode.setAttribute(propName, propValue);\r\n                }\r\n                else {\r\n                    domNode[propName] = propValue;\r\n                }\r\n            }\r\n        };\r\n        for (var i = 0; i < propCount; i++) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    var addChildren = function (domNode, children, projectionOptions) {\r\n        if (!children) {\r\n            return;\r\n        }\r\n        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\r\n            var child = children_1[_i];\r\n            createDom(child, domNode, undefined, projectionOptions);\r\n        }\r\n    };\r\n    var initPropertiesAndChildren = function (domNode, vnode, projectionOptions) {\r\n        addChildren(domNode, vnode.children, projectionOptions); // children before properties, needed for value property of <select>.\r\n        if (vnode.text) {\r\n            domNode.textContent = vnode.text;\r\n        }\r\n        setProperties(domNode, vnode.properties, projectionOptions);\r\n        if (vnode.properties && vnode.properties.afterCreate) {\r\n            vnode.properties.afterCreate.apply(vnode.properties.bind || vnode.properties, [domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children]);\r\n        }\r\n    };\r\n    var createDom = function (vnode, parentNode, insertBefore, projectionOptions) {\r\n        var domNode;\r\n        var start = 0;\r\n        var vnodeSelector = vnode.vnodeSelector;\r\n        var doc = parentNode.ownerDocument;\r\n        if (vnodeSelector === '') {\r\n            domNode = vnode.domNode = doc.createTextNode(vnode.text);\r\n            if (insertBefore !== undefined) {\r\n                parentNode.insertBefore(domNode, insertBefore);\r\n            }\r\n            else {\r\n                parentNode.appendChild(domNode);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i <= vnodeSelector.length; ++i) {\r\n                var c = vnodeSelector.charAt(i);\r\n                if (i === vnodeSelector.length || c === '.' || c === '#') {\r\n                    var type = vnodeSelector.charAt(start - 1);\r\n                    var found = vnodeSelector.slice(start, i);\r\n                    if (type === '.') {\r\n                        domNode.classList.add(found);\r\n                    }\r\n                    else if (type === '#') {\r\n                        domNode.id = found;\r\n                    }\r\n                    else {\r\n                        if (found === 'svg') {\r\n                            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\r\n                        }\r\n                        if (projectionOptions.namespace !== undefined) {\r\n                            domNode = vnode.domNode = doc.createElementNS(projectionOptions.namespace, found);\r\n                        }\r\n                        else {\r\n                            domNode = vnode.domNode = (vnode.domNode || doc.createElement(found));\r\n                            if (found === 'input' && vnode.properties && vnode.properties.type !== undefined) {\r\n                                // IE8 and older don't support setting input type after the DOM Node has been added to the document\r\n                                domNode.setAttribute('type', vnode.properties.type);\r\n                            }\r\n                        }\r\n                        if (insertBefore !== undefined) {\r\n                            parentNode.insertBefore(domNode, insertBefore);\r\n                        }\r\n                        else if (domNode.parentNode !== parentNode) {\r\n                            parentNode.appendChild(domNode);\r\n                        }\r\n                    }\r\n                    start = i + 1;\r\n                }\r\n            }\r\n            initPropertiesAndChildren(domNode, vnode, projectionOptions);\r\n        }\r\n    };\r\n    var updateDom;\r\n    /**\r\n     * Adds or removes classes from an Element\r\n     * @param domNode the element\r\n     * @param classes a string separated list of classes\r\n     * @param on true means add classes, false means remove\r\n     */\r\n    var toggleClasses = function (domNode, classes, on) {\r\n        if (!classes) {\r\n            return;\r\n        }\r\n        classes.split(' ').forEach(function (c) { return domNode.classList.toggle(c, on); });\r\n    };\r\n    var updateProperties = function (domNode, previousProperties, properties, projectionOptions) {\r\n        if (!properties) {\r\n            return;\r\n        }\r\n        var propertiesUpdated = false;\r\n        var propNames = Object.keys(properties);\r\n        var propCount = propNames.length;\r\n        for (var i = 0; i < propCount; i++) {\r\n            var propName = propNames[i];\r\n            // assuming that properties will be nullified instead of missing is by design\r\n            var propValue = properties[propName];\r\n            var previousValue = previousProperties[propName];\r\n            if (propName === 'class') {\r\n                if (previousValue !== propValue) {\r\n                    toggleClasses(domNode, previousValue, false);\r\n                    toggleClasses(domNode, propValue, true);\r\n                }\r\n            }\r\n            else if (propName === 'classes') {\r\n                var classList = domNode.classList;\r\n                var classNames = Object.keys(propValue);\r\n                var classNameCount = classNames.length;\r\n                for (var j = 0; j < classNameCount; j++) {\r\n                    var className = classNames[j];\r\n                    var on = !!propValue[className];\r\n                    var previousOn = !!previousValue[className];\r\n                    if (on === previousOn) {\r\n                        continue;\r\n                    }\r\n                    propertiesUpdated = true;\r\n                    if (on) {\r\n                        classList.add(className);\r\n                    }\r\n                    else {\r\n                        classList.remove(className);\r\n                    }\r\n                }\r\n            }\r\n            else if (propName === 'styles') {\r\n                var styleNames = Object.keys(propValue);\r\n                var styleCount = styleNames.length;\r\n                for (var j = 0; j < styleCount; j++) {\r\n                    var styleName = styleNames[j];\r\n                    var newStyleValue = propValue[styleName];\r\n                    var oldStyleValue = previousValue[styleName];\r\n                    if (newStyleValue === oldStyleValue) {\r\n                        continue;\r\n                    }\r\n                    propertiesUpdated = true;\r\n                    if (newStyleValue) {\r\n                        checkStyleValue(newStyleValue);\r\n                        projectionOptions.styleApplyer(domNode, styleName, newStyleValue);\r\n                    }\r\n                    else {\r\n                        projectionOptions.styleApplyer(domNode, styleName, '');\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (!propValue && typeof previousValue === 'string') {\r\n                    propValue = '';\r\n                }\r\n                if (propName === 'value') { // value can be manipulated by the user directly and using event.preventDefault() is not an option\r\n                    var domValue = domNode[propName];\r\n                    if (domValue !== propValue // The 'value' in the DOM tree !== newValue\r\n                        && (domNode['oninput-value']\r\n                            ? domValue === domNode['oninput-value'] // If the last reported value to 'oninput' does not match domValue, do nothing and wait for oninput\r\n                            : propValue !== previousValue // Only update the value if the vdom changed\r\n                        )) {\r\n                        // The edge cases are described in the tests\r\n                        domNode[propName] = propValue; // Reset the value, even if the virtual DOM did not change\r\n                        domNode['oninput-value'] = undefined;\r\n                    } // else do not update the domNode, otherwise the cursor position would be changed\r\n                    if (propValue !== previousValue) {\r\n                        propertiesUpdated = true;\r\n                    }\r\n                }\r\n                else if (propValue !== previousValue) {\r\n                    var type = typeof propValue;\r\n                    if (type !== 'function' || !projectionOptions.eventHandlerInterceptor) { // Function updates are expected to be handled by the EventHandlerInterceptor\r\n                        if (projectionOptions.namespace === NAMESPACE_SVG) {\r\n                            if (propName === 'href') {\r\n                                domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);\r\n                            }\r\n                            else {\r\n                                // all SVG attributes are read-only in DOM, so...\r\n                                domNode.setAttribute(propName, propValue);\r\n                            }\r\n                        }\r\n                        else if (type === 'string' && propName !== 'innerHTML') {\r\n                            if (propName === 'role' && propValue === '') {\r\n                                domNode.removeAttribute(propName);\r\n                            }\r\n                            else {\r\n                                domNode.setAttribute(propName, propValue);\r\n                            }\r\n                        }\r\n                        else if (domNode[propName] !== propValue) { // Comparison is here for side-effects in Edge with scrollLeft and scrollTop\r\n                            domNode[propName] = propValue;\r\n                        }\r\n                        propertiesUpdated = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return propertiesUpdated;\r\n    };\r\n    var updateChildren = function (vnode, domNode, oldChildren, newChildren, projectionOptions) {\r\n        if (oldChildren === newChildren) {\r\n            return false;\r\n        }\r\n        oldChildren = oldChildren || emptyArray;\r\n        newChildren = newChildren || emptyArray;\r\n        var oldChildrenLength = oldChildren.length;\r\n        var newChildrenLength = newChildren.length;\r\n        var oldIndex = 0;\r\n        var newIndex = 0;\r\n        var i;\r\n        var textUpdated = false;\r\n        while (newIndex < newChildrenLength) {\r\n            var oldChild = (oldIndex < oldChildrenLength) ? oldChildren[oldIndex] : undefined;\r\n            var newChild = newChildren[newIndex];\r\n            if (oldChild !== undefined && same(oldChild, newChild)) {\r\n                textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\r\n                oldIndex++;\r\n            }\r\n            else {\r\n                var findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\r\n                if (findOldIndex >= 0) {\r\n                    // Remove preceding missing children\r\n                    for (i = oldIndex; i < findOldIndex; i++) {\r\n                        nodeToRemove(oldChildren[i]);\r\n                        checkDistinguishable(oldChildren, i, vnode, 'removed');\r\n                    }\r\n                    textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\r\n                    oldIndex = findOldIndex + 1;\r\n                }\r\n                else {\r\n                    // New child\r\n                    createDom(newChild, domNode, (oldIndex < oldChildrenLength) ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\r\n                    nodeAdded(newChild);\r\n                    checkDistinguishable(newChildren, newIndex, vnode, 'added');\r\n                }\r\n            }\r\n            newIndex++;\r\n        }\r\n        if (oldChildrenLength > oldIndex) {\r\n            // Remove child fragments\r\n            for (i = oldIndex; i < oldChildrenLength; i++) {\r\n                nodeToRemove(oldChildren[i]);\r\n                checkDistinguishable(oldChildren, i, vnode, 'removed');\r\n            }\r\n        }\r\n        return textUpdated;\r\n    };\r\n    updateDom = function (previous, vnode, projectionOptions) {\r\n        var domNode = previous.domNode;\r\n        var textUpdated = false;\r\n        if (previous === vnode) {\r\n            return false; // By contract, VNode objects may not be modified anymore after passing them to maquette\r\n        }\r\n        var updated = false;\r\n        if (vnode.vnodeSelector === '') {\r\n            if (vnode.text !== previous.text) {\r\n                var newTextNode = domNode.ownerDocument.createTextNode(vnode.text);\r\n                domNode.parentNode.replaceChild(newTextNode, domNode);\r\n                vnode.domNode = newTextNode;\r\n                textUpdated = true;\r\n                return textUpdated;\r\n            }\r\n            vnode.domNode = domNode;\r\n        }\r\n        else {\r\n            if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) { // lastIndexOf(needle,0)===0 means StartsWith\r\n                projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\r\n            }\r\n            if (previous.text !== vnode.text) {\r\n                updated = true;\r\n                if (vnode.text === undefined) {\r\n                    domNode.removeChild(domNode.firstChild); // the only textnode presumably\r\n                }\r\n                else {\r\n                    domNode.textContent = vnode.text;\r\n                }\r\n            }\r\n            vnode.domNode = domNode;\r\n            updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\r\n            updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\r\n            if (vnode.properties && vnode.properties.afterUpdate) {\r\n                vnode.properties.afterUpdate.apply(vnode.properties.bind || vnode.properties, [domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children]);\r\n            }\r\n        }\r\n        if (updated && vnode.properties && vnode.properties.updateAnimation) {\r\n            vnode.properties.updateAnimation(domNode, vnode.properties, previous.properties);\r\n        }\r\n        return textUpdated;\r\n    };\r\n    var createProjection = function (vnode, projectionOptions) {\r\n        return {\r\n            getLastRender: function () { return vnode; },\r\n            update: function (updatedVnode) {\r\n                if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\r\n                    throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\r\n                }\r\n                var previousVNode = vnode;\r\n                vnode = updatedVnode;\r\n                updateDom(previousVNode, updatedVnode, projectionOptions);\r\n            },\r\n            domNode: vnode.domNode\r\n        };\r\n    };\n\n    var DEFAULT_PROJECTION_OPTIONS = {\r\n        namespace: undefined,\r\n        performanceLogger: function () { return undefined; },\r\n        eventHandlerInterceptor: undefined,\r\n        styleApplyer: function (domNode, styleName, value) {\r\n            // Provides a hook to add vendor prefixes for browsers that still need it.\r\n            domNode.style[styleName] = value;\r\n        }\r\n    };\r\n    var applyDefaultProjectionOptions = function (projectorOptions) {\r\n        return extend(DEFAULT_PROJECTION_OPTIONS, projectorOptions);\r\n    };\r\n    var dom = {\r\n        /**\r\n         * Creates a real DOM tree from `vnode`. The [[Projection]] object returned will contain the resulting DOM Node in\r\n         * its [[Projection.domNode|domNode]] property.\r\n         * This is a low-level method. Users will typically use a [[Projector]] instead.\r\n         * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\r\n         * objects may only be rendered once.\r\n         * @param projectionOptions - Options to be used to create and update the projection.\r\n         * @returns The [[Projection]] which also contains the DOM Node that was created.\r\n         */\r\n        create: function (vnode, projectionOptions) {\r\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n            createDom(vnode, document.createElement('div'), undefined, projectionOptions);\r\n            return createProjection(vnode, projectionOptions);\r\n        },\r\n        /**\r\n         * Appends a new child node to the DOM which is generated from a [[VNode]].\r\n         * This is a low-level method. Users will typically use a [[Projector]] instead.\r\n         * @param parentNode - The parent node for the new child node.\r\n         * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\r\n         * objects may only be rendered once.\r\n         * @param projectionOptions - Options to be used to create and update the [[Projection]].\r\n         * @returns The [[Projection]] that was created.\r\n         */\r\n        append: function (parentNode, vnode, projectionOptions) {\r\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n            createDom(vnode, parentNode, undefined, projectionOptions);\r\n            return createProjection(vnode, projectionOptions);\r\n        },\r\n        /**\r\n         * Inserts a new DOM node which is generated from a [[VNode]].\r\n         * This is a low-level method. Users wil typically use a [[Projector]] instead.\r\n         * @param beforeNode - The node that the DOM Node is inserted before.\r\n         * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function.\r\n         * NOTE: [[VNode]] objects may only be rendered once.\r\n         * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\r\n         * @returns The [[Projection]] that was created.\r\n         */\r\n        insertBefore: function (beforeNode, vnode, projectionOptions) {\r\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n            createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\r\n            return createProjection(vnode, projectionOptions);\r\n        },\r\n        /**\r\n         * Merges a new DOM node which is generated from a [[VNode]] with an existing DOM Node.\r\n         * This means that the virtual DOM and the real DOM will have one overlapping element.\r\n         * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided.\r\n         * This is a low-level method. Users wil typically use a [[Projector]] instead.\r\n         * @param element - The existing element to adopt as the root of the new virtual DOM. Existing attributes and child nodes are preserved.\r\n         * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]] objects\r\n         * may only be rendered once.\r\n         * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\r\n         * @returns The [[Projection]] that was created.\r\n         */\r\n        merge: function (element, vnode, projectionOptions) {\r\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n            vnode.domNode = element;\r\n            initPropertiesAndChildren(element, vnode, projectionOptions);\r\n            return createProjection(vnode, projectionOptions);\r\n        },\r\n        /**\r\n         * Replaces an existing DOM node with a node generated from a [[VNode]].\r\n         * This is a low-level method. Users will typically use a [[Projector]] instead.\r\n         * @param element - The node for the [[VNode]] to replace.\r\n         * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\r\n         * objects may only be rendered once.\r\n         * @param projectionOptions - Options to be used to create and update the [[Projection]].\r\n         * @returns The [[Projection]] that was created.\r\n         */\r\n        replace: function (element, vnode, projectionOptions) {\r\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n            createDom(vnode, element.parentNode, element, projectionOptions);\r\n            element.parentNode.removeChild(element);\r\n            return createProjection(vnode, projectionOptions);\r\n        }\r\n    };\n\n    /* tslint:disable function-name */\r\n    var toTextVNode = function (data) {\r\n        return {\r\n            vnodeSelector: '',\r\n            properties: undefined,\r\n            children: undefined,\r\n            text: data.toString(),\r\n            domNode: null\r\n        };\r\n    };\r\n    var appendChildren = function (parentSelector, insertions, main) {\r\n        for (var i = 0, length_1 = insertions.length; i < length_1; i++) {\r\n            var item = insertions[i];\r\n            if (Array.isArray(item)) {\r\n                appendChildren(parentSelector, item, main);\r\n            }\r\n            else {\r\n                if (item !== null && item !== undefined && item !== false) {\r\n                    if (typeof item === 'string') {\r\n                        item = toTextVNode(item);\r\n                    }\r\n                    main.push(item);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    function h(selector, properties, children) {\r\n        if (Array.isArray(properties)) {\r\n            children = properties;\r\n            properties = undefined;\r\n        }\r\n        else if ((properties && (typeof properties === 'string' || properties.hasOwnProperty('vnodeSelector'))) ||\r\n            (children && (typeof children === 'string' || children.hasOwnProperty('vnodeSelector')))) {\r\n            throw new Error('h called with invalid arguments');\r\n        }\r\n        var text;\r\n        var flattenedChildren;\r\n        // Recognize a common special case where there is only a single text node\r\n        if (children && children.length === 1 && typeof children[0] === 'string') {\r\n            text = children[0];\r\n        }\r\n        else if (children) {\r\n            flattenedChildren = [];\r\n            appendChildren(selector, children, flattenedChildren);\r\n            if (flattenedChildren.length === 0) {\r\n                flattenedChildren = undefined;\r\n            }\r\n        }\r\n        return {\r\n            vnodeSelector: selector,\r\n            properties: properties,\r\n            children: flattenedChildren,\r\n            text: (text === '') ? undefined : text,\r\n            domNode: null\r\n        };\r\n    }\n\n    var createParentNodePath = function (node, rootNode) {\r\n        var parentNodePath = [];\r\n        while (node !== rootNode) {\r\n            parentNodePath.push(node);\r\n            node = node.parentNode;\r\n        }\r\n        return parentNodePath;\r\n    };\r\n    var find;\r\n    if (Array.prototype.find) {\r\n        find = function (items, predicate) { return items.find(predicate); };\r\n    }\r\n    else {\r\n        find = function (items, predicate) { return items.filter(predicate)[0]; };\r\n    }\r\n    var findVNodeByParentNodePath = function (vnode, parentNodePath) {\r\n        var result = vnode;\r\n        parentNodePath.forEach(function (node) {\r\n            result = (result && result.children) ? find(result.children, function (child) { return child.domNode === node; }) : undefined;\r\n        });\r\n        return result;\r\n    };\r\n    var createEventHandlerInterceptor = function (projector, getProjection, performanceLogger) {\r\n        var modifiedEventHandler = function (evt) {\r\n            performanceLogger('domEvent', evt);\r\n            var projection = getProjection();\r\n            var parentNodePath = createParentNodePath(evt.currentTarget, projection.domNode);\r\n            parentNodePath.reverse();\r\n            var matchingVNode = findVNodeByParentNodePath(projection.getLastRender(), parentNodePath);\r\n            projector.scheduleRender();\r\n            var result;\r\n            if (matchingVNode) {\r\n                /* tslint:disable no-invalid-this */\r\n                result = matchingVNode.properties[\"on\" + evt.type].apply(matchingVNode.properties.bind || this, arguments);\r\n                /* tslint:enable no-invalid-this */\r\n            }\r\n            performanceLogger('domEventProcessed', evt);\r\n            return result;\r\n        };\r\n        return function (propertyName, eventHandler, domNode, properties) { return modifiedEventHandler; };\r\n    };\r\n    /**\r\n     * Creates a [[Projector]] instance using the provided projectionOptions.\r\n     *\r\n     * For more information, see [[Projector]].\r\n     *\r\n     * @param projectorOptions   Options that influence how the DOM is rendered and updated.\r\n     */\r\n    var createProjector = function (projectorOptions) {\r\n        var projector;\r\n        var projectionOptions = applyDefaultProjectionOptions(projectorOptions);\r\n        var performanceLogger = projectionOptions.performanceLogger;\r\n        var renderCompleted = true;\r\n        var scheduled;\r\n        var stopped = false;\r\n        var projections = [];\r\n        var renderFunctions = []; // matches the projections array\r\n        var addProjection = function (\r\n        /* one of: dom.append, dom.insertBefore, dom.replace, dom.merge */\r\n        domFunction, \r\n        /* the parameter of the domFunction */\r\n        node, renderFunction) {\r\n            var projection;\r\n            var getProjection = function () { return projection; };\r\n            projectionOptions.eventHandlerInterceptor = createEventHandlerInterceptor(projector, getProjection, performanceLogger);\r\n            projection = domFunction(node, renderFunction(), projectionOptions);\r\n            projections.push(projection);\r\n            renderFunctions.push(renderFunction);\r\n        };\r\n        var doRender = function () {\r\n            scheduled = undefined;\r\n            if (!renderCompleted) {\r\n                return; // The last render threw an error, it should have been logged in the browser console.\r\n            }\r\n            renderCompleted = false;\r\n            performanceLogger('renderStart', undefined);\r\n            for (var i = 0; i < projections.length; i++) {\r\n                var updatedVnode = renderFunctions[i]();\r\n                performanceLogger('rendered', undefined);\r\n                projections[i].update(updatedVnode);\r\n                performanceLogger('patched', undefined);\r\n            }\r\n            performanceLogger('renderDone', undefined);\r\n            renderCompleted = true;\r\n        };\r\n        projector = {\r\n            renderNow: doRender,\r\n            scheduleRender: function () {\r\n                if (!scheduled && !stopped) {\r\n                    scheduled = requestAnimationFrame(doRender);\r\n                }\r\n            },\r\n            stop: function () {\r\n                if (scheduled) {\r\n                    cancelAnimationFrame(scheduled);\r\n                    scheduled = undefined;\r\n                }\r\n                stopped = true;\r\n            },\r\n            resume: function () {\r\n                stopped = false;\r\n                renderCompleted = true;\r\n                projector.scheduleRender();\r\n            },\r\n            append: function (parentNode, renderFunction) {\r\n                addProjection(dom.append, parentNode, renderFunction);\r\n            },\r\n            insertBefore: function (beforeNode, renderFunction) {\r\n                addProjection(dom.insertBefore, beforeNode, renderFunction);\r\n            },\r\n            merge: function (domNode, renderFunction) {\r\n                addProjection(dom.merge, domNode, renderFunction);\r\n            },\r\n            replace: function (domNode, renderFunction) {\r\n                addProjection(dom.replace, domNode, renderFunction);\r\n            },\r\n            detach: function (renderFunction) {\r\n                for (var i = 0; i < renderFunctions.length; i++) {\r\n                    if (renderFunctions[i] === renderFunction) {\r\n                        renderFunctions.splice(i, 1);\r\n                        return projections.splice(i, 1)[0];\r\n                    }\r\n                }\r\n                throw new Error('renderFunction was not found');\r\n            }\r\n        };\r\n        return projector;\r\n    };\n\n    /**\r\n     * Creates a [[CalculationCache]] object, useful for caching [[VNode]] trees.\r\n     * In practice, caching of [[VNode]] trees is not needed, because achieving 60 frames per second is almost never a problem.\r\n     * For more information, see [[CalculationCache]].\r\n     *\r\n     * @param <Result> The type of the value that is cached.\r\n     */\r\n    var createCache = function () {\r\n        var cachedInputs;\r\n        var cachedOutcome;\r\n        return {\r\n            invalidate: function () {\r\n                cachedOutcome = undefined;\r\n                cachedInputs = undefined;\r\n            },\r\n            result: function (inputs, calculation) {\r\n                if (cachedInputs) {\r\n                    for (var i = 0; i < inputs.length; i++) {\r\n                        if (cachedInputs[i] !== inputs[i]) {\r\n                            cachedOutcome = undefined;\r\n                        }\r\n                    }\r\n                }\r\n                if (!cachedOutcome) {\r\n                    cachedOutcome = calculation();\r\n                    cachedInputs = inputs;\r\n                }\r\n                return cachedOutcome;\r\n            }\r\n        };\r\n    };\n\n    /**\r\n     * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\r\n     * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\r\n     *\r\n     * @param <Source>       The type of source items. A database-record for instance.\r\n     * @param <Target>       The type of target items. A [[MaquetteComponent]] for instance.\r\n     * @param getSourceKey   `function(source)` that must return a key to identify each source object. The result must either be a string or a number.\r\n     * @param createResult   `function(source, index)` that must create a new result object from a given source. This function is identical\r\n     *                       to the `callback` argument in `Array.map(callback)`.\r\n     * @param updateResult   `function(source, target, index)` that updates a result to an updated source.\r\n     */\r\n    var createMapping = function (getSourceKey, createResult, updateResult) {\r\n        var keys = [];\r\n        var results = [];\r\n        return {\r\n            results: results,\r\n            map: function (newSources) {\r\n                var newKeys = newSources.map(getSourceKey);\r\n                var oldTargets = results.slice();\r\n                var oldIndex = 0;\r\n                for (var i = 0; i < newSources.length; i++) {\r\n                    var source = newSources[i];\r\n                    var sourceKey = newKeys[i];\r\n                    if (sourceKey === keys[oldIndex]) {\r\n                        results[i] = oldTargets[oldIndex];\r\n                        updateResult(source, oldTargets[oldIndex], i);\r\n                        oldIndex++;\r\n                    }\r\n                    else {\r\n                        var found = false;\r\n                        for (var j = 1; j < keys.length + 1; j++) {\r\n                            var searchIndex = (oldIndex + j) % keys.length;\r\n                            if (keys[searchIndex] === sourceKey) {\r\n                                results[i] = oldTargets[searchIndex];\r\n                                updateResult(newSources[i], oldTargets[searchIndex], i);\r\n                                oldIndex = searchIndex + 1;\r\n                                found = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!found) {\r\n                            results[i] = createResult(source, i);\r\n                        }\r\n                    }\r\n                }\r\n                results.length = newSources.length;\r\n                keys = newKeys;\r\n            }\r\n        };\r\n    };\n\n    exports.dom = dom;\n    exports.h = h;\n    exports.createProjector = createProjector;\n    exports.createCache = createCache;\n    exports.createMapping = createMapping;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":150,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":151,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":152,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":153,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":154,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":155,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":156,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":157,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":158,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":159,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":160,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":161,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":162,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":163,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":164,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":165,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":166,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":167,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":168,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":169,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":170,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":171,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":172,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":173,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":174,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":175,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":176,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":177,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":178,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":179,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":180,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":181,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":182,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":183,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":184,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":185,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":186,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":187,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":188,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":189,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":190,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":191,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":192,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":193,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":194,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":195,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":196,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":197,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":198,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":199,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":200,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":201,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":202,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":203,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":204,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":205,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":206,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":207,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":208,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":209,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":210,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":211,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":212,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":213,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":214,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":215,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":216,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":217,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":218,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":219,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":220,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":221,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":222,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":223,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":224,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":225,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":226,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":227,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":228,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":229,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":230,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":231,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":232,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":233,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":234,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":235,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":236,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":237,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":238,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":239,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":240,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":241,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":242,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":243,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":244,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":245,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":246,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":247,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":248,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":249,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":250,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":251,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":252,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":253,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":254,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":255,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":256,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":257,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":258,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":259,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":260,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":261,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":262,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":263,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":264,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":265,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":266,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":267,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":268,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":269,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":270,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":271,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":272,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":273,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":274,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":275,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":276,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":277,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":278,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":279,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":280,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":281,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":282,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":283,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":284,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":285,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":286,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":287,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":288,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":289,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":290,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":291,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":292,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":293,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":294,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":295,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":296,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":297,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":298,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":299,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":300,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":301,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":302,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":303,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":304,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":305,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":306,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":307,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":308,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":309,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":310,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":311,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":312,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":313,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":314,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":315,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":316,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":317,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":318,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":319,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":320,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":321,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":322,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":323,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":324,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":325,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":326,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":327,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":328,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":329,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":330,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":331,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":332,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":333,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":334,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":335,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":336,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":337,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":338,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":339,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":340,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":341,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":342,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":343,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":344,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":345,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":346,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":347,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":348,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":349,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":350,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":351,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":352,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":353,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":354,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":355,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":356,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":357,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":358,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":359,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":360,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":361,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":362,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":363,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":364,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":365,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":366,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":367,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":368,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":369,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":370,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":371,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":372,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":373,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":374,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":375,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":376,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":377,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":378,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":379,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":380,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":381,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":382,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":383,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":384,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":385,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":386,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":387,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":388,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":389,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":390,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":391,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":392,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":393,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":394,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":395,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":396,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":397,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":398,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":399,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":400,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":401,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":402,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":403,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":404,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":405,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":406,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":407,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":408,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":409,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":410,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":411,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":412,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":413,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":414,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":415,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":416,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":417,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":418,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":419,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":420,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":421,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":422,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":423,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":424,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":425,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":426,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":427,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":428,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":429,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":430,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":431,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":432,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":433,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":434,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":435,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":436,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":437,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":438,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":439,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":440,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":441,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":442,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":443,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":444,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":445,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":446,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":447,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":448,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":449,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":450,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":451,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":452,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":453,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":454,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":455,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":456,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":457,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":458,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":459,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":460,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":461,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":462,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":463,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":464,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":465,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":466,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":467,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":468,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":469,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":470,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":471,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":472,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":473,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":474,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":475,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":476,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":477,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":478,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":479,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":480,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":481,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":482,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":483,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":484,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":485,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":486,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":487,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":488,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":489,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":490,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":491,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":492,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":493,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":494,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":495,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":496,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":497,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":498,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":499,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":500,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":501,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":502,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":503,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":504,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":505,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":506,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":507,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":508,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":509,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":510,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":511,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":512,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":513,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":514,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":515,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":516,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":517,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":518,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":519,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":520,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":521,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":522,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":523,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":524,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":525,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":526,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":527,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":528,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":529,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":530,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":531,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":532,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":533,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":534,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":535,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":536,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":537,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":538,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":539,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":540,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":541,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":542,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":543,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":544,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":545,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":546,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":547,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":548,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":549,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":550,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":551,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":552,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":553,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":554,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":555,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":556,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":557,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":558,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":559,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":560,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":561,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":562,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":563,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":564,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":565,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":566,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":567,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":568,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":569,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":570,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":571,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":572,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":573,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":574,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":575,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":576,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":577,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":578,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":579,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":580,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":581,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":582,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":583,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":584,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":585,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":586,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":587,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":588,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":589,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":590,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":591,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":592,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":593,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":594,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":595,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":596,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":597,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":598,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":599,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":600,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":601,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":602,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":603,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":604,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":605,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":606,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":607,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":608,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":609,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":610,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":611,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":612,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":613,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":614,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":615,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":616,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":617,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":618,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":619,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":620,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":621,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":622,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":623,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":624,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":625,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":626,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":627,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":628,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":629,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":630,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":631,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":632,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":633,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":634,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":635,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":636,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":637,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":638,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":639,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":640,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":641,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":642,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":643,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":644,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":645,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":646,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":647,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":648,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":649,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":650,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":651,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":652,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":653,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":654,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":655,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":656,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":657,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":658,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":659,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":660,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":661,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":662,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":663,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":664,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":665,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":666,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":667,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":668,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":669,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":670,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":671,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":672,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":673,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":674,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":675,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":676,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":677,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":678,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":679,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":680,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":681,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":682,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":683,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":684,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":685,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":686,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":687,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":688,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":689,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":690,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":691,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":692,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":693,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":694,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":695,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":696,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":697,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":698,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":699,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":700,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":701,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":702,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":703,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":704,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":705,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":706,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":707,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":708,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":709,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":710,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":711,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":712,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":713,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":714,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":715,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":716,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":717,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":718,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":719,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":720,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":721,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":722,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":723,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":724,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":725,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":726,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":727,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":728,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":729,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":730,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":731,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":732,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":733,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":734,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":735,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":736,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":737,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":738,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":739,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":740,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":741,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":742,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":743,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":744,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":745,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":746,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":747,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":748,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":749,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":750,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":751,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":752,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":753,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":754,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":755,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":756,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":757,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":758,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":759,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":760,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":761,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":762,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":763,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":764,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":765,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":766,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":767,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":768,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":769,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":770,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":771,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":772,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":773,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":774,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":775,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":776,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":777,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":778,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":779,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":780,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":781,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":782,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":783,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":784,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":785,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":786,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":787,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":788,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":789,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":790,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":791,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":792,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":793,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":794,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":795,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":796,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":797,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":798,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":799,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":800,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":801,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":802,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":803,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":804,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":805,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":806,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":807,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":808,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":809,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":810,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":811,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":812,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":813,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":814,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":815,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":816,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":817,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":818,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":819,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":820,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":821,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":822,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":823,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":824,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":825,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":826,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":827,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":828,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":829,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":830,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":831,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":832,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":833,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":834,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":835,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":836,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":837,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":838,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":839,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":840,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":841,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":842,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":843,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":844,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":845,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":846,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":847,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":848,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":849,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":850,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":851,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":852,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":853,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":854,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":855,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":856,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":857,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":858,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":859,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":860,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":861,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":862,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":863,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":864,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":865,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":866,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":867,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":868,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":869,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":870,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":871,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/maquette/dist/maquette.umd.js","original":{"line":872,"column":0},"generated":{"line":874,"column":0}}],"sources":{"node_modules/maquette/dist/maquette.umd.js":"(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.maquette = {})));\n}(this, (function (exports) { 'use strict';\n\n    /* tslint:disable no-http-string */\r\n    var NAMESPACE_W3 = 'http://www.w3.org/';\r\n    /* tslint:enable no-http-string */\r\n    var NAMESPACE_SVG = NAMESPACE_W3 + \"2000/svg\";\r\n    var NAMESPACE_XLINK = NAMESPACE_W3 + \"1999/xlink\";\r\n    var emptyArray = [];\r\n    var extend = function (base, overrides) {\r\n        var result = {};\r\n        Object.keys(base).forEach(function (key) {\r\n            result[key] = base[key];\r\n        });\r\n        if (overrides) {\r\n            Object.keys(overrides).forEach(function (key) {\r\n                result[key] = overrides[key];\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n    var same = function (vnode1, vnode2) {\r\n        if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\r\n            return false;\r\n        }\r\n        if (vnode1.properties && vnode2.properties) {\r\n            if (vnode1.properties.key !== vnode2.properties.key) {\r\n                return false;\r\n            }\r\n            return vnode1.properties.bind === vnode2.properties.bind;\r\n        }\r\n        return !vnode1.properties && !vnode2.properties;\r\n    };\r\n    var checkStyleValue = function (styleValue) {\r\n        if (typeof styleValue !== 'string') {\r\n            throw new Error('Style values must be strings');\r\n        }\r\n    };\r\n    var findIndexOfChild = function (children, sameAs, start) {\r\n        if (sameAs.vnodeSelector !== '') {\r\n            // Never scan for text-nodes\r\n            for (var i = start; i < children.length; i++) {\r\n                if (same(children[i], sameAs)) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    var checkDistinguishable = function (childNodes, indexToCheck, parentVNode, operation) {\r\n        var childNode = childNodes[indexToCheck];\r\n        if (childNode.vnodeSelector === '') {\r\n            return; // Text nodes need not be distinguishable\r\n        }\r\n        var properties = childNode.properties;\r\n        var key = properties ? (properties.key === undefined ? properties.bind : properties.key) : undefined;\r\n        if (!key) { // A key is just assumed to be unique\r\n            for (var i = 0; i < childNodes.length; i++) {\r\n                if (i !== indexToCheck) {\r\n                    var node = childNodes[i];\r\n                    if (same(node, childNode)) {\r\n                        throw new Error(parentVNode.vnodeSelector + \" had a \" + childNode.vnodeSelector + \" child \" + (operation === 'added' ? operation : 'removed') + \", but there is now more than one. You must add unique key properties to make them distinguishable.\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var nodeAdded = function (vNode) {\r\n        if (vNode.properties) {\r\n            var enterAnimation = vNode.properties.enterAnimation;\r\n            if (enterAnimation) {\r\n                enterAnimation(vNode.domNode, vNode.properties);\r\n            }\r\n        }\r\n    };\r\n    var removedNodes = [];\r\n    var requestedIdleCallback = false;\r\n    var visitRemovedNode = function (node) {\r\n        (node.children || []).forEach(visitRemovedNode);\r\n        if (node.properties && node.properties.afterRemoved) {\r\n            node.properties.afterRemoved.apply(node.properties.bind || node.properties, [node.domNode]);\r\n        }\r\n    };\r\n    var processPendingNodeRemovals = function () {\r\n        requestedIdleCallback = false;\r\n        removedNodes.forEach(visitRemovedNode);\r\n        removedNodes.length = 0;\r\n    };\r\n    var scheduleNodeRemoval = function (vNode) {\r\n        removedNodes.push(vNode);\r\n        if (!requestedIdleCallback) {\r\n            requestedIdleCallback = true;\r\n            if (typeof window !== 'undefined' && 'requestIdleCallback' in window) {\r\n                window.requestIdleCallback(processPendingNodeRemovals, { timeout: 16 });\r\n            }\r\n            else {\r\n                setTimeout(processPendingNodeRemovals, 16);\r\n            }\r\n        }\r\n    };\r\n    var nodeToRemove = function (vNode) {\r\n        var domNode = vNode.domNode;\r\n        if (vNode.properties) {\r\n            var exitAnimation = vNode.properties.exitAnimation;\r\n            if (exitAnimation) {\r\n                domNode.style.pointerEvents = 'none';\r\n                var removeDomNode = function () {\r\n                    if (domNode.parentNode) {\r\n                        domNode.parentNode.removeChild(domNode);\r\n                        scheduleNodeRemoval(vNode);\r\n                    }\r\n                };\r\n                exitAnimation(domNode, removeDomNode, vNode.properties);\r\n                return;\r\n            }\r\n        }\r\n        if (domNode.parentNode) {\r\n            domNode.parentNode.removeChild(domNode);\r\n            scheduleNodeRemoval(vNode);\r\n        }\r\n    };\r\n    var setProperties = function (domNode, properties, projectionOptions) {\r\n        if (!properties) {\r\n            return;\r\n        }\r\n        var eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\r\n        var propNames = Object.keys(properties);\r\n        var propCount = propNames.length;\r\n        var _loop_1 = function (i) {\r\n            var propName = propNames[i];\r\n            var propValue = properties[propName];\r\n            if (propName === 'className') {\r\n                throw new Error('Property \"className\" is not supported, use \"class\".');\r\n            }\r\n            else if (propName === 'class') {\r\n                toggleClasses(domNode, propValue, true);\r\n            }\r\n            else if (propName === 'classes') {\r\n                // object with string keys and boolean values\r\n                var classNames = Object.keys(propValue);\r\n                var classNameCount = classNames.length;\r\n                for (var j = 0; j < classNameCount; j++) {\r\n                    var className = classNames[j];\r\n                    if (propValue[className]) {\r\n                        domNode.classList.add(className);\r\n                    }\r\n                }\r\n            }\r\n            else if (propName === 'styles') {\r\n                // object with string keys and string (!) values\r\n                var styleNames = Object.keys(propValue);\r\n                var styleCount = styleNames.length;\r\n                for (var j = 0; j < styleCount; j++) {\r\n                    var styleName = styleNames[j];\r\n                    var styleValue = propValue[styleName];\r\n                    if (styleValue) {\r\n                        checkStyleValue(styleValue);\r\n                        projectionOptions.styleApplyer(domNode, styleName, styleValue);\r\n                    }\r\n                }\r\n            }\r\n            else if (propName !== 'key' && propValue !== null && propValue !== undefined) {\r\n                var type = typeof propValue;\r\n                if (type === 'function') {\r\n                    if (propName.lastIndexOf('on', 0) === 0) { // lastIndexOf(,0)===0 -> startsWith\r\n                        if (eventHandlerInterceptor) {\r\n                            propValue = eventHandlerInterceptor(propName, propValue, domNode, properties); // intercept eventhandlers\r\n                        }\r\n                        if (propName === 'oninput') {\r\n                            /* tslint:disable no-this-keyword no-invalid-this only-arrow-functions no-void-expression */\r\n                            (function () {\r\n                                // record the evt.target.value, because IE and Edge sometimes do a requestAnimationFrame between changing value and running oninput\r\n                                var oldPropValue = propValue;\r\n                                propValue = function (evt) {\r\n                                    oldPropValue.apply(this, [evt]);\r\n                                    evt.target['oninput-value'] = evt.target.value; // may be HTMLTextAreaElement as well\r\n                                };\r\n                            }());\r\n                            /* tslint:enable */\r\n                        }\r\n                        domNode[propName] = propValue;\r\n                    }\r\n                }\r\n                else if (projectionOptions.namespace === NAMESPACE_SVG) {\r\n                    if (propName === 'href') {\r\n                        domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);\r\n                    }\r\n                    else {\r\n                        // all SVG attributes are read-only in DOM, so...\r\n                        domNode.setAttribute(propName, propValue);\r\n                    }\r\n                }\r\n                else if (type === 'string' && propName !== 'value' && propName !== 'innerHTML') {\r\n                    domNode.setAttribute(propName, propValue);\r\n                }\r\n                else {\r\n                    domNode[propName] = propValue;\r\n                }\r\n            }\r\n        };\r\n        for (var i = 0; i < propCount; i++) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    var addChildren = function (domNode, children, projectionOptions) {\r\n        if (!children) {\r\n            return;\r\n        }\r\n        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\r\n            var child = children_1[_i];\r\n            createDom(child, domNode, undefined, projectionOptions);\r\n        }\r\n    };\r\n    var initPropertiesAndChildren = function (domNode, vnode, projectionOptions) {\r\n        addChildren(domNode, vnode.children, projectionOptions); // children before properties, needed for value property of <select>.\r\n        if (vnode.text) {\r\n            domNode.textContent = vnode.text;\r\n        }\r\n        setProperties(domNode, vnode.properties, projectionOptions);\r\n        if (vnode.properties && vnode.properties.afterCreate) {\r\n            vnode.properties.afterCreate.apply(vnode.properties.bind || vnode.properties, [domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children]);\r\n        }\r\n    };\r\n    var createDom = function (vnode, parentNode, insertBefore, projectionOptions) {\r\n        var domNode;\r\n        var start = 0;\r\n        var vnodeSelector = vnode.vnodeSelector;\r\n        var doc = parentNode.ownerDocument;\r\n        if (vnodeSelector === '') {\r\n            domNode = vnode.domNode = doc.createTextNode(vnode.text);\r\n            if (insertBefore !== undefined) {\r\n                parentNode.insertBefore(domNode, insertBefore);\r\n            }\r\n            else {\r\n                parentNode.appendChild(domNode);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i <= vnodeSelector.length; ++i) {\r\n                var c = vnodeSelector.charAt(i);\r\n                if (i === vnodeSelector.length || c === '.' || c === '#') {\r\n                    var type = vnodeSelector.charAt(start - 1);\r\n                    var found = vnodeSelector.slice(start, i);\r\n                    if (type === '.') {\r\n                        domNode.classList.add(found);\r\n                    }\r\n                    else if (type === '#') {\r\n                        domNode.id = found;\r\n                    }\r\n                    else {\r\n                        if (found === 'svg') {\r\n                            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\r\n                        }\r\n                        if (projectionOptions.namespace !== undefined) {\r\n                            domNode = vnode.domNode = doc.createElementNS(projectionOptions.namespace, found);\r\n                        }\r\n                        else {\r\n                            domNode = vnode.domNode = (vnode.domNode || doc.createElement(found));\r\n                            if (found === 'input' && vnode.properties && vnode.properties.type !== undefined) {\r\n                                // IE8 and older don't support setting input type after the DOM Node has been added to the document\r\n                                domNode.setAttribute('type', vnode.properties.type);\r\n                            }\r\n                        }\r\n                        if (insertBefore !== undefined) {\r\n                            parentNode.insertBefore(domNode, insertBefore);\r\n                        }\r\n                        else if (domNode.parentNode !== parentNode) {\r\n                            parentNode.appendChild(domNode);\r\n                        }\r\n                    }\r\n                    start = i + 1;\r\n                }\r\n            }\r\n            initPropertiesAndChildren(domNode, vnode, projectionOptions);\r\n        }\r\n    };\r\n    var updateDom;\r\n    /**\r\n     * Adds or removes classes from an Element\r\n     * @param domNode the element\r\n     * @param classes a string separated list of classes\r\n     * @param on true means add classes, false means remove\r\n     */\r\n    var toggleClasses = function (domNode, classes, on) {\r\n        if (!classes) {\r\n            return;\r\n        }\r\n        classes.split(' ').forEach(function (c) { return domNode.classList.toggle(c, on); });\r\n    };\r\n    var updateProperties = function (domNode, previousProperties, properties, projectionOptions) {\r\n        if (!properties) {\r\n            return;\r\n        }\r\n        var propertiesUpdated = false;\r\n        var propNames = Object.keys(properties);\r\n        var propCount = propNames.length;\r\n        for (var i = 0; i < propCount; i++) {\r\n            var propName = propNames[i];\r\n            // assuming that properties will be nullified instead of missing is by design\r\n            var propValue = properties[propName];\r\n            var previousValue = previousProperties[propName];\r\n            if (propName === 'class') {\r\n                if (previousValue !== propValue) {\r\n                    toggleClasses(domNode, previousValue, false);\r\n                    toggleClasses(domNode, propValue, true);\r\n                }\r\n            }\r\n            else if (propName === 'classes') {\r\n                var classList = domNode.classList;\r\n                var classNames = Object.keys(propValue);\r\n                var classNameCount = classNames.length;\r\n                for (var j = 0; j < classNameCount; j++) {\r\n                    var className = classNames[j];\r\n                    var on = !!propValue[className];\r\n                    var previousOn = !!previousValue[className];\r\n                    if (on === previousOn) {\r\n                        continue;\r\n                    }\r\n                    propertiesUpdated = true;\r\n                    if (on) {\r\n                        classList.add(className);\r\n                    }\r\n                    else {\r\n                        classList.remove(className);\r\n                    }\r\n                }\r\n            }\r\n            else if (propName === 'styles') {\r\n                var styleNames = Object.keys(propValue);\r\n                var styleCount = styleNames.length;\r\n                for (var j = 0; j < styleCount; j++) {\r\n                    var styleName = styleNames[j];\r\n                    var newStyleValue = propValue[styleName];\r\n                    var oldStyleValue = previousValue[styleName];\r\n                    if (newStyleValue === oldStyleValue) {\r\n                        continue;\r\n                    }\r\n                    propertiesUpdated = true;\r\n                    if (newStyleValue) {\r\n                        checkStyleValue(newStyleValue);\r\n                        projectionOptions.styleApplyer(domNode, styleName, newStyleValue);\r\n                    }\r\n                    else {\r\n                        projectionOptions.styleApplyer(domNode, styleName, '');\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (!propValue && typeof previousValue === 'string') {\r\n                    propValue = '';\r\n                }\r\n                if (propName === 'value') { // value can be manipulated by the user directly and using event.preventDefault() is not an option\r\n                    var domValue = domNode[propName];\r\n                    if (domValue !== propValue // The 'value' in the DOM tree !== newValue\r\n                        && (domNode['oninput-value']\r\n                            ? domValue === domNode['oninput-value'] // If the last reported value to 'oninput' does not match domValue, do nothing and wait for oninput\r\n                            : propValue !== previousValue // Only update the value if the vdom changed\r\n                        )) {\r\n                        // The edge cases are described in the tests\r\n                        domNode[propName] = propValue; // Reset the value, even if the virtual DOM did not change\r\n                        domNode['oninput-value'] = undefined;\r\n                    } // else do not update the domNode, otherwise the cursor position would be changed\r\n                    if (propValue !== previousValue) {\r\n                        propertiesUpdated = true;\r\n                    }\r\n                }\r\n                else if (propValue !== previousValue) {\r\n                    var type = typeof propValue;\r\n                    if (type !== 'function' || !projectionOptions.eventHandlerInterceptor) { // Function updates are expected to be handled by the EventHandlerInterceptor\r\n                        if (projectionOptions.namespace === NAMESPACE_SVG) {\r\n                            if (propName === 'href') {\r\n                                domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);\r\n                            }\r\n                            else {\r\n                                // all SVG attributes are read-only in DOM, so...\r\n                                domNode.setAttribute(propName, propValue);\r\n                            }\r\n                        }\r\n                        else if (type === 'string' && propName !== 'innerHTML') {\r\n                            if (propName === 'role' && propValue === '') {\r\n                                domNode.removeAttribute(propName);\r\n                            }\r\n                            else {\r\n                                domNode.setAttribute(propName, propValue);\r\n                            }\r\n                        }\r\n                        else if (domNode[propName] !== propValue) { // Comparison is here for side-effects in Edge with scrollLeft and scrollTop\r\n                            domNode[propName] = propValue;\r\n                        }\r\n                        propertiesUpdated = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return propertiesUpdated;\r\n    };\r\n    var updateChildren = function (vnode, domNode, oldChildren, newChildren, projectionOptions) {\r\n        if (oldChildren === newChildren) {\r\n            return false;\r\n        }\r\n        oldChildren = oldChildren || emptyArray;\r\n        newChildren = newChildren || emptyArray;\r\n        var oldChildrenLength = oldChildren.length;\r\n        var newChildrenLength = newChildren.length;\r\n        var oldIndex = 0;\r\n        var newIndex = 0;\r\n        var i;\r\n        var textUpdated = false;\r\n        while (newIndex < newChildrenLength) {\r\n            var oldChild = (oldIndex < oldChildrenLength) ? oldChildren[oldIndex] : undefined;\r\n            var newChild = newChildren[newIndex];\r\n            if (oldChild !== undefined && same(oldChild, newChild)) {\r\n                textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\r\n                oldIndex++;\r\n            }\r\n            else {\r\n                var findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\r\n                if (findOldIndex >= 0) {\r\n                    // Remove preceding missing children\r\n                    for (i = oldIndex; i < findOldIndex; i++) {\r\n                        nodeToRemove(oldChildren[i]);\r\n                        checkDistinguishable(oldChildren, i, vnode, 'removed');\r\n                    }\r\n                    textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\r\n                    oldIndex = findOldIndex + 1;\r\n                }\r\n                else {\r\n                    // New child\r\n                    createDom(newChild, domNode, (oldIndex < oldChildrenLength) ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\r\n                    nodeAdded(newChild);\r\n                    checkDistinguishable(newChildren, newIndex, vnode, 'added');\r\n                }\r\n            }\r\n            newIndex++;\r\n        }\r\n        if (oldChildrenLength > oldIndex) {\r\n            // Remove child fragments\r\n            for (i = oldIndex; i < oldChildrenLength; i++) {\r\n                nodeToRemove(oldChildren[i]);\r\n                checkDistinguishable(oldChildren, i, vnode, 'removed');\r\n            }\r\n        }\r\n        return textUpdated;\r\n    };\r\n    updateDom = function (previous, vnode, projectionOptions) {\r\n        var domNode = previous.domNode;\r\n        var textUpdated = false;\r\n        if (previous === vnode) {\r\n            return false; // By contract, VNode objects may not be modified anymore after passing them to maquette\r\n        }\r\n        var updated = false;\r\n        if (vnode.vnodeSelector === '') {\r\n            if (vnode.text !== previous.text) {\r\n                var newTextNode = domNode.ownerDocument.createTextNode(vnode.text);\r\n                domNode.parentNode.replaceChild(newTextNode, domNode);\r\n                vnode.domNode = newTextNode;\r\n                textUpdated = true;\r\n                return textUpdated;\r\n            }\r\n            vnode.domNode = domNode;\r\n        }\r\n        else {\r\n            if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) { // lastIndexOf(needle,0)===0 means StartsWith\r\n                projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\r\n            }\r\n            if (previous.text !== vnode.text) {\r\n                updated = true;\r\n                if (vnode.text === undefined) {\r\n                    domNode.removeChild(domNode.firstChild); // the only textnode presumably\r\n                }\r\n                else {\r\n                    domNode.textContent = vnode.text;\r\n                }\r\n            }\r\n            vnode.domNode = domNode;\r\n            updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\r\n            updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\r\n            if (vnode.properties && vnode.properties.afterUpdate) {\r\n                vnode.properties.afterUpdate.apply(vnode.properties.bind || vnode.properties, [domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children]);\r\n            }\r\n        }\r\n        if (updated && vnode.properties && vnode.properties.updateAnimation) {\r\n            vnode.properties.updateAnimation(domNode, vnode.properties, previous.properties);\r\n        }\r\n        return textUpdated;\r\n    };\r\n    var createProjection = function (vnode, projectionOptions) {\r\n        return {\r\n            getLastRender: function () { return vnode; },\r\n            update: function (updatedVnode) {\r\n                if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\r\n                    throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\r\n                }\r\n                var previousVNode = vnode;\r\n                vnode = updatedVnode;\r\n                updateDom(previousVNode, updatedVnode, projectionOptions);\r\n            },\r\n            domNode: vnode.domNode\r\n        };\r\n    };\n\n    var DEFAULT_PROJECTION_OPTIONS = {\r\n        namespace: undefined,\r\n        performanceLogger: function () { return undefined; },\r\n        eventHandlerInterceptor: undefined,\r\n        styleApplyer: function (domNode, styleName, value) {\r\n            // Provides a hook to add vendor prefixes for browsers that still need it.\r\n            domNode.style[styleName] = value;\r\n        }\r\n    };\r\n    var applyDefaultProjectionOptions = function (projectorOptions) {\r\n        return extend(DEFAULT_PROJECTION_OPTIONS, projectorOptions);\r\n    };\r\n    var dom = {\r\n        /**\r\n         * Creates a real DOM tree from `vnode`. The [[Projection]] object returned will contain the resulting DOM Node in\r\n         * its [[Projection.domNode|domNode]] property.\r\n         * This is a low-level method. Users will typically use a [[Projector]] instead.\r\n         * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\r\n         * objects may only be rendered once.\r\n         * @param projectionOptions - Options to be used to create and update the projection.\r\n         * @returns The [[Projection]] which also contains the DOM Node that was created.\r\n         */\r\n        create: function (vnode, projectionOptions) {\r\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n            createDom(vnode, document.createElement('div'), undefined, projectionOptions);\r\n            return createProjection(vnode, projectionOptions);\r\n        },\r\n        /**\r\n         * Appends a new child node to the DOM which is generated from a [[VNode]].\r\n         * This is a low-level method. Users will typically use a [[Projector]] instead.\r\n         * @param parentNode - The parent node for the new child node.\r\n         * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\r\n         * objects may only be rendered once.\r\n         * @param projectionOptions - Options to be used to create and update the [[Projection]].\r\n         * @returns The [[Projection]] that was created.\r\n         */\r\n        append: function (parentNode, vnode, projectionOptions) {\r\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n            createDom(vnode, parentNode, undefined, projectionOptions);\r\n            return createProjection(vnode, projectionOptions);\r\n        },\r\n        /**\r\n         * Inserts a new DOM node which is generated from a [[VNode]].\r\n         * This is a low-level method. Users wil typically use a [[Projector]] instead.\r\n         * @param beforeNode - The node that the DOM Node is inserted before.\r\n         * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function.\r\n         * NOTE: [[VNode]] objects may only be rendered once.\r\n         * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\r\n         * @returns The [[Projection]] that was created.\r\n         */\r\n        insertBefore: function (beforeNode, vnode, projectionOptions) {\r\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n            createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\r\n            return createProjection(vnode, projectionOptions);\r\n        },\r\n        /**\r\n         * Merges a new DOM node which is generated from a [[VNode]] with an existing DOM Node.\r\n         * This means that the virtual DOM and the real DOM will have one overlapping element.\r\n         * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided.\r\n         * This is a low-level method. Users wil typically use a [[Projector]] instead.\r\n         * @param element - The existing element to adopt as the root of the new virtual DOM. Existing attributes and child nodes are preserved.\r\n         * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]] objects\r\n         * may only be rendered once.\r\n         * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\r\n         * @returns The [[Projection]] that was created.\r\n         */\r\n        merge: function (element, vnode, projectionOptions) {\r\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n            vnode.domNode = element;\r\n            initPropertiesAndChildren(element, vnode, projectionOptions);\r\n            return createProjection(vnode, projectionOptions);\r\n        },\r\n        /**\r\n         * Replaces an existing DOM node with a node generated from a [[VNode]].\r\n         * This is a low-level method. Users will typically use a [[Projector]] instead.\r\n         * @param element - The node for the [[VNode]] to replace.\r\n         * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\r\n         * objects may only be rendered once.\r\n         * @param projectionOptions - Options to be used to create and update the [[Projection]].\r\n         * @returns The [[Projection]] that was created.\r\n         */\r\n        replace: function (element, vnode, projectionOptions) {\r\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n            createDom(vnode, element.parentNode, element, projectionOptions);\r\n            element.parentNode.removeChild(element);\r\n            return createProjection(vnode, projectionOptions);\r\n        }\r\n    };\n\n    /* tslint:disable function-name */\r\n    var toTextVNode = function (data) {\r\n        return {\r\n            vnodeSelector: '',\r\n            properties: undefined,\r\n            children: undefined,\r\n            text: data.toString(),\r\n            domNode: null\r\n        };\r\n    };\r\n    var appendChildren = function (parentSelector, insertions, main) {\r\n        for (var i = 0, length_1 = insertions.length; i < length_1; i++) {\r\n            var item = insertions[i];\r\n            if (Array.isArray(item)) {\r\n                appendChildren(parentSelector, item, main);\r\n            }\r\n            else {\r\n                if (item !== null && item !== undefined && item !== false) {\r\n                    if (typeof item === 'string') {\r\n                        item = toTextVNode(item);\r\n                    }\r\n                    main.push(item);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    function h(selector, properties, children) {\r\n        if (Array.isArray(properties)) {\r\n            children = properties;\r\n            properties = undefined;\r\n        }\r\n        else if ((properties && (typeof properties === 'string' || properties.hasOwnProperty('vnodeSelector'))) ||\r\n            (children && (typeof children === 'string' || children.hasOwnProperty('vnodeSelector')))) {\r\n            throw new Error('h called with invalid arguments');\r\n        }\r\n        var text;\r\n        var flattenedChildren;\r\n        // Recognize a common special case where there is only a single text node\r\n        if (children && children.length === 1 && typeof children[0] === 'string') {\r\n            text = children[0];\r\n        }\r\n        else if (children) {\r\n            flattenedChildren = [];\r\n            appendChildren(selector, children, flattenedChildren);\r\n            if (flattenedChildren.length === 0) {\r\n                flattenedChildren = undefined;\r\n            }\r\n        }\r\n        return {\r\n            vnodeSelector: selector,\r\n            properties: properties,\r\n            children: flattenedChildren,\r\n            text: (text === '') ? undefined : text,\r\n            domNode: null\r\n        };\r\n    }\n\n    var createParentNodePath = function (node, rootNode) {\r\n        var parentNodePath = [];\r\n        while (node !== rootNode) {\r\n            parentNodePath.push(node);\r\n            node = node.parentNode;\r\n        }\r\n        return parentNodePath;\r\n    };\r\n    var find;\r\n    if (Array.prototype.find) {\r\n        find = function (items, predicate) { return items.find(predicate); };\r\n    }\r\n    else {\r\n        find = function (items, predicate) { return items.filter(predicate)[0]; };\r\n    }\r\n    var findVNodeByParentNodePath = function (vnode, parentNodePath) {\r\n        var result = vnode;\r\n        parentNodePath.forEach(function (node) {\r\n            result = (result && result.children) ? find(result.children, function (child) { return child.domNode === node; }) : undefined;\r\n        });\r\n        return result;\r\n    };\r\n    var createEventHandlerInterceptor = function (projector, getProjection, performanceLogger) {\r\n        var modifiedEventHandler = function (evt) {\r\n            performanceLogger('domEvent', evt);\r\n            var projection = getProjection();\r\n            var parentNodePath = createParentNodePath(evt.currentTarget, projection.domNode);\r\n            parentNodePath.reverse();\r\n            var matchingVNode = findVNodeByParentNodePath(projection.getLastRender(), parentNodePath);\r\n            projector.scheduleRender();\r\n            var result;\r\n            if (matchingVNode) {\r\n                /* tslint:disable no-invalid-this */\r\n                result = matchingVNode.properties[\"on\" + evt.type].apply(matchingVNode.properties.bind || this, arguments);\r\n                /* tslint:enable no-invalid-this */\r\n            }\r\n            performanceLogger('domEventProcessed', evt);\r\n            return result;\r\n        };\r\n        return function (propertyName, eventHandler, domNode, properties) { return modifiedEventHandler; };\r\n    };\r\n    /**\r\n     * Creates a [[Projector]] instance using the provided projectionOptions.\r\n     *\r\n     * For more information, see [[Projector]].\r\n     *\r\n     * @param projectorOptions   Options that influence how the DOM is rendered and updated.\r\n     */\r\n    var createProjector = function (projectorOptions) {\r\n        var projector;\r\n        var projectionOptions = applyDefaultProjectionOptions(projectorOptions);\r\n        var performanceLogger = projectionOptions.performanceLogger;\r\n        var renderCompleted = true;\r\n        var scheduled;\r\n        var stopped = false;\r\n        var projections = [];\r\n        var renderFunctions = []; // matches the projections array\r\n        var addProjection = function (\r\n        /* one of: dom.append, dom.insertBefore, dom.replace, dom.merge */\r\n        domFunction, \r\n        /* the parameter of the domFunction */\r\n        node, renderFunction) {\r\n            var projection;\r\n            var getProjection = function () { return projection; };\r\n            projectionOptions.eventHandlerInterceptor = createEventHandlerInterceptor(projector, getProjection, performanceLogger);\r\n            projection = domFunction(node, renderFunction(), projectionOptions);\r\n            projections.push(projection);\r\n            renderFunctions.push(renderFunction);\r\n        };\r\n        var doRender = function () {\r\n            scheduled = undefined;\r\n            if (!renderCompleted) {\r\n                return; // The last render threw an error, it should have been logged in the browser console.\r\n            }\r\n            renderCompleted = false;\r\n            performanceLogger('renderStart', undefined);\r\n            for (var i = 0; i < projections.length; i++) {\r\n                var updatedVnode = renderFunctions[i]();\r\n                performanceLogger('rendered', undefined);\r\n                projections[i].update(updatedVnode);\r\n                performanceLogger('patched', undefined);\r\n            }\r\n            performanceLogger('renderDone', undefined);\r\n            renderCompleted = true;\r\n        };\r\n        projector = {\r\n            renderNow: doRender,\r\n            scheduleRender: function () {\r\n                if (!scheduled && !stopped) {\r\n                    scheduled = requestAnimationFrame(doRender);\r\n                }\r\n            },\r\n            stop: function () {\r\n                if (scheduled) {\r\n                    cancelAnimationFrame(scheduled);\r\n                    scheduled = undefined;\r\n                }\r\n                stopped = true;\r\n            },\r\n            resume: function () {\r\n                stopped = false;\r\n                renderCompleted = true;\r\n                projector.scheduleRender();\r\n            },\r\n            append: function (parentNode, renderFunction) {\r\n                addProjection(dom.append, parentNode, renderFunction);\r\n            },\r\n            insertBefore: function (beforeNode, renderFunction) {\r\n                addProjection(dom.insertBefore, beforeNode, renderFunction);\r\n            },\r\n            merge: function (domNode, renderFunction) {\r\n                addProjection(dom.merge, domNode, renderFunction);\r\n            },\r\n            replace: function (domNode, renderFunction) {\r\n                addProjection(dom.replace, domNode, renderFunction);\r\n            },\r\n            detach: function (renderFunction) {\r\n                for (var i = 0; i < renderFunctions.length; i++) {\r\n                    if (renderFunctions[i] === renderFunction) {\r\n                        renderFunctions.splice(i, 1);\r\n                        return projections.splice(i, 1)[0];\r\n                    }\r\n                }\r\n                throw new Error('renderFunction was not found');\r\n            }\r\n        };\r\n        return projector;\r\n    };\n\n    /**\r\n     * Creates a [[CalculationCache]] object, useful for caching [[VNode]] trees.\r\n     * In practice, caching of [[VNode]] trees is not needed, because achieving 60 frames per second is almost never a problem.\r\n     * For more information, see [[CalculationCache]].\r\n     *\r\n     * @param <Result> The type of the value that is cached.\r\n     */\r\n    var createCache = function () {\r\n        var cachedInputs;\r\n        var cachedOutcome;\r\n        return {\r\n            invalidate: function () {\r\n                cachedOutcome = undefined;\r\n                cachedInputs = undefined;\r\n            },\r\n            result: function (inputs, calculation) {\r\n                if (cachedInputs) {\r\n                    for (var i = 0; i < inputs.length; i++) {\r\n                        if (cachedInputs[i] !== inputs[i]) {\r\n                            cachedOutcome = undefined;\r\n                        }\r\n                    }\r\n                }\r\n                if (!cachedOutcome) {\r\n                    cachedOutcome = calculation();\r\n                    cachedInputs = inputs;\r\n                }\r\n                return cachedOutcome;\r\n            }\r\n        };\r\n    };\n\n    /**\r\n     * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\r\n     * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\r\n     *\r\n     * @param <Source>       The type of source items. A database-record for instance.\r\n     * @param <Target>       The type of target items. A [[MaquetteComponent]] for instance.\r\n     * @param getSourceKey   `function(source)` that must return a key to identify each source object. The result must either be a string or a number.\r\n     * @param createResult   `function(source, index)` that must create a new result object from a given source. This function is identical\r\n     *                       to the `callback` argument in `Array.map(callback)`.\r\n     * @param updateResult   `function(source, target, index)` that updates a result to an updated source.\r\n     */\r\n    var createMapping = function (getSourceKey, createResult, updateResult) {\r\n        var keys = [];\r\n        var results = [];\r\n        return {\r\n            results: results,\r\n            map: function (newSources) {\r\n                var newKeys = newSources.map(getSourceKey);\r\n                var oldTargets = results.slice();\r\n                var oldIndex = 0;\r\n                for (var i = 0; i < newSources.length; i++) {\r\n                    var source = newSources[i];\r\n                    var sourceKey = newKeys[i];\r\n                    if (sourceKey === keys[oldIndex]) {\r\n                        results[i] = oldTargets[oldIndex];\r\n                        updateResult(source, oldTargets[oldIndex], i);\r\n                        oldIndex++;\r\n                    }\r\n                    else {\r\n                        var found = false;\r\n                        for (var j = 1; j < keys.length + 1; j++) {\r\n                            var searchIndex = (oldIndex + j) % keys.length;\r\n                            if (keys[searchIndex] === sourceKey) {\r\n                                results[i] = oldTargets[searchIndex];\r\n                                updateResult(newSources[i], oldTargets[searchIndex], i);\r\n                                oldIndex = searchIndex + 1;\r\n                                found = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!found) {\r\n                            results[i] = createResult(source, i);\r\n                        }\r\n                    }\r\n                }\r\n                results.length = newSources.length;\r\n                keys = newKeys;\r\n            }\r\n        };\r\n    };\n\n    exports.dom = dom;\n    exports.h = h;\n    exports.createProjector = createProjector;\n    exports.createCache = createCache;\n    exports.createMapping = createMapping;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"},"lineCount":874}},"error":null,"hash":"aaa3d42bcc5de40bc5bd2f07565622f0","cacheData":{"env":{}}}